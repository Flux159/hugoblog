<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Experiments on Suyog's Blog</title><link>https://suyogs.com/categories/experiments/</link><description>Recent content in Experiments on Suyog's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 07 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://suyogs.com/categories/experiments/index.xml" rel="self" type="application/rss+xml"/><item><title>Next.js with Postgraphile</title><link>https://suyogs.com/p/experiments/next-js-with-postgraphile/</link><pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate><guid>https://suyogs.com/p/experiments/next-js-with-postgraphile/</guid><description>Introducing next-postgraphile Motivation TODO: Finish up
Next.js Next.js is an elegant web app starter platform that combines an opinionated webpack configuration with React and more recently a lightweight API layer.
Using next.js with Typescript provides an elegant way to develop webapps applications quickly while utilizing the react ecosystem for prebuilt components. Due to how simple next.js makes development and deployment, it&amp;rsquo;s become my go to development platform for javascript webapps.</description></item><item><title>Create your own Windows Gaming PC on AWS</title><link>https://suyogs.com/p/experiments/windows-gaming-pc-on-aws/</link><pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate><guid>https://suyogs.com/p/experiments/windows-gaming-pc-on-aws/</guid><description>Google Stadia recently came out and one of the interesting things about it is that it streams games from the cloud to your devices. I had previously built a gaming PC around 10 years ago with an Nvidia GTX 260 and an Intel Core i5-750 (eventually upgraded to Nvidia 750 Ti). I hadnâ€™t used the PC in a while and my experiments with setting up VSCode on AWS got me thinking about setting up my own Gaming server on AWS too.</description></item><item><title>VSCode Online with AWS</title><link>https://suyogs.com/p/experiments/vscode-online-with-aws/</link><pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate><guid>https://suyogs.com/p/experiments/vscode-online-with-aws/</guid><description>NOTE: This post is deprecated as VSCode Online added the ability to start a vscode server without a UI after rebranding to Visual Studio Codespaces. Github Codespaces would probably use something similar and would be a better overall experience than manually setting up an instance on AWS.
I&amp;rsquo;m writing this blog post using VSCode Online using a hosted environment on AWS.
This is pretty awesome as it lets me use VSCode from a webbrowser to connect to a VM running on my AWS account.</description></item><item><title>Github Pages for Static Sites</title><link>https://suyogs.com/p/experiments/github-pages-for-static-sites/</link><pubDate>Thu, 28 Nov 2019 00:00:00 +0000</pubDate><guid>https://suyogs.com/p/experiments/github-pages-for-static-sites/</guid><description>Intro Writing a static site has gotten significantly more difficult than &amp;ldquo;upload a .html file to a shared host&amp;rdquo; in the 90s.
This post is talking about how I setup this blog to be hosted on Github Pages and used a Github Action to update on every push to master. It uses Gatsby as the static site generator and I started with a template that lets me use mdx in my posts for interactive React content.</description></item><item><title>QEMU and Tinycore Linux</title><link>https://suyogs.com/p/experiments/qemu-and-tinycore/</link><pubDate>Thu, 28 Nov 2019 00:00:00 +0000</pubDate><guid>https://suyogs.com/p/experiments/qemu-and-tinycore/</guid><description>Experiment working with QEMU and Tinycore linux on a Mac.
Setup On a Mac, get QEMU by using Homebrew
brew install qemu Download Core-current.iso and TinyCore-current.iso from Tinycore&amp;rsquo;s website. For the experiment below, they are located in my Downloads folder ~/Downloads/.
Experiment mkdir qemutests cd qemutests qemu-img create tinycore.img 512M qemu-system-x86_64 -hda tinycore.img -m 512 -cdrom ~/Downloads/Core-current.iso -boot d -net nic -net user,hostfwd=tcp:127.0.0.1:8008-:80 Note that you must have that second -net command to download things properly.</description></item><item><title>Titanic Dataset</title><link>https://suyogs.com/p/experiments/titanic-dataset/</link><pubDate>Thu, 28 Nov 2019 00:00:00 +0000</pubDate><guid>https://suyogs.com/p/experiments/titanic-dataset/</guid><description>Working with the Titanic Dataset in Jupyter.</description></item><item><title>Zero to Web Browser</title><link>https://suyogs.com/p/experiments/zero-to-web-browser/</link><pubDate>Thu, 28 Nov 2019 00:00:00 +0000</pubDate><guid>https://suyogs.com/p/experiments/zero-to-web-browser/</guid><description>Intro This is mainly a thought project I&amp;rsquo;ve had for a while now taking inspiration from Nand2Tetris, OS Development, Build your own react and various projects working on making an Operating Sytem from scratch.
I want to take the next step from writing an OS (bootloader, kernel, processes &amp;amp; memory management, drivers) to writing a full fledged Web Browser. This would involve a lot of additional work (including writing a windowing engine, html/css parser, JS engine), but it should be feasible to have a working system that can connect to the Web.</description></item></channel></rss>